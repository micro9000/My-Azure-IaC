# This is build in https://dev.azure.com/RichCorner/DevOpsInfrastructures/
trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: GenerateAgentImageCreds
  - name: location
    value: 'eastasia'
  - name: imageName
    value: 'ubuntu-22.04'
  - name: ImageResourceGroupName
    value: 'My-DevOps-Agent-OS-Images-RG'
  - name: AppRegistrationName
    value: 'Temporary-Client-To-Build-Image'

jobs:
  - job: CloneRunnerImage
    displayName: Clone GitHub Runner Image Repo
    steps:
      - script: git clone https://github.com/actions/runner-images.git
        displayName: 'Clone Repo'
        failOnStderr: false
        workingDirectory: '$(Pipeline.Workspace)'

      - task: Bash@3
        displayName: "Dump environment variables and list files"
        inputs:
          workingDirectory: '$(Pipeline.Workspace)'
          targetType: inline
          script: |
            printenv
            ls -la
      
      - script: |
          clientid=$(az ad app create --display-name $(AppRegistrationName) --query appId --output tsv)

          ###Remove api permissions: disable default exposed scope first
          default_scope=$(az ad app show --id $clientid | jq '.oauth2Permissions[0].isEnabled = false' | jq -r '.oauth2Permissions')
          az ad app update --id $clientid --set oauth2Permissions="$default_scope"
          az ad app update --id $clientid --set oauth2Permissions="[]"

          clientsecretname=mycert2
          clientsecretduration=2
          clientsecret=$(az ad app credential reset --id $clientid --append --display-name $clientsecretname --months $clientsecretduration --query password --output tsv)
          
          echo "##vso[task.setvariable variable=myTemporaryClientId;issecret=true]$clientid"
          echo "##vso[task.setvariable variable=myTemporaryClientSecret;issecret=true]$clientsecret"
        displayName: 'Create Temporary App Registration'
        failOnStderr: false

      - script: |
          az login --service-principal -u $(myTemporaryClientId) -p $(myTemporaryClientSecret) --tenant $(TenantId)
          az group create --name $(ImageResourceGroupName) --location eastasia
        displayName: 'Create Resource Group'
        failOnStderr: false

      - script: |
          packer init -upgrade images/ubuntu/templates/ubuntu-22.04.pkr.hcl
        displayName: 'Initialize packer'
        failOnStderr: false
        workingDirectory: '$(Pipeline.Workspace)/runner-images'

      - script: |
          packer build -var "subscription_id=$(SubscriptionId)" \
             -var "client_id=$(myTemporaryClientId)" \
             -var "client_secret=$(myTemporaryClientSecret)" \
             -var "location=$(location)" \
             -var "managed_image_name=$(ImageName)" \
             -var "managed_image_resource_group_name=$(ImageResourceGroupName)" \
             -var "tenant_id=$(TenantId)" \
             "images/ubuntu/templates/ubuntu-22.04.pkr.hcl"
        displayName: 'Build image'
        failOnStderr: false
        workingDirectory: '$(Pipeline.Workspace)/runner-images'

      - script: |
          az ad app delete --id $(myTemporaryClientId)
          az logout
        displayName: 'Create Resource Group'
        failOnStderr: false
